
import sys

import pygame
from alien import Alien

from bullet import Bullet

def check_keydown_events(event, ai_settings, screen, ship, bullets):
    """ Respond to keypresses."""
    if event.key == pygame.K_RIGHT:
	ship.moving_right = True
    elif event.key == pygame.K_LEFT:
	ship.moving_left = True
    elif event.key == pygame.K_SPACE:
	fire_bullet(ai_settings, screen, ship, bullets)

def fire_bullet(ai_settings, screen, ship, bullets):
    """ Fire bullet if limit not reachd yet."""
    # Create a new bullet and add to the bullets group.
    if len(bullets) < ai_settings.bullets_allowed:
	new_bullet = Bullet(ai_settings, screen, ship)
	bullets.add(new_bullet)

def check_keyup_events(event, ship):
    """ Respond to key releases. """
    if event.key == pygame.K_RIGHT:
	ship.moving_right = False
    elif event.key == pygame.K_LEFT:
	ship.moving_left = False

def check_events(ai_settings, screen, ship, bullets):
    """ Respond to keypresses and mouse events."""
    for event in pygame.event.get():
	if event.type == pygame.QUIT:
 	    sys.exit()
	elif event.type == pygame.KEYDOWN:
	    check_keydown_events(event, ai_settings, screen, ship, bullets)
	elif event.type == pygame.KEYUP:
	    check_keyup_events(event, ship)

def update_bullets(bullets):
    """ Update position of bullets and get rid of old bullets."""
    # Update bullet positions.
    bullets.update()

    # Get rif of bullets that have dissapearred.
    for bullet in bullets.copy():
	if bullet.rect.bottom <= 0:
	    bullets.remove(bullet)

def update_screen(ai_settings, screen, ship, aliens, bullets):
    screen.fill(ai_settings.bg_color)

    """Update imagees on the screen and flip to the new screen."""
    # Redraw all bullets behind ship and aliens.
    for bullet in bullets.sprites():
	bullet.draw_bullet()


    ship.blitme()
    aliens.draw(screen)

    # Make the most recently drawn screen visible.
    pygame.display.flip()

def create_fleet(ai_settings, screen, aliens):
    """ Create a full fleet of aliens."""
    # Create an alien and find the number of aliens in a row.
    alien = Alien(ai_settings, screen)
    number_aliens_x = get_number_aliens_x(ai_settings, alien.rect.width

    # Create the first row of aliens.
    for alien_number in range(number_alieens_x):
	create_alien(ai_settings, screen, aliens, alien_number)
def get_number_aliens_x(ai_settings, alien_width):
    """ Determine the numbere of aliens that fit in a row."""
    avalible_space_x = ai_settings.screen_width - 2 * alien_width
    number_aliens_x = int(available_space_x / (2 * alien_width))
    retun number_aliens_x 
def create_alien(ai_settings, screen, aliens, alien_number):
    """ Create an alien and place it in the row."""
    alien = Alien(ai_settings, screen)
    alien_width = alien.rect.width
    alien.x = alien_width + 2 * alien_width * alien_number
    alien.rect.x = alien.x
    aliens.add(alien)

